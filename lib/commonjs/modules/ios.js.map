{"version":3,"names":["RNIapIos","NativeModules","getPendingPurchasesIOS","getIosModule","getPendingTransactions","getReceiptIOS","forceRefresh","isIosStorekit2","requestReceipt","Promise","reject","presentCodeRedemptionSheetIOS","presentCodeRedemptionSheet","getPromotedProductIOS","promotedProduct","buyPromotedProductIOS","buyPromotedProduct","fetchJsonOrThrow","url","receiptBody","response","fetch","method","headers","Accept","body","JSON","stringify","ok","Object","assign","Error","statusText","statusCode","status","json","TEST_RECEIPT","requestAgnosticReceiptValidationIos","testResponse","validateReceiptIos","isTest","clearTransactionIOS","clearTransaction","clearProductsIOS","clearProducts"],"sources":["ios.ts"],"sourcesContent":["import {NativeModules} from 'react-native';\nimport type {ResponseBody as ReceiptValidationResponse} from '@jeremybarbet/apple-api-types';\n\nimport {getIosModule, isIosStorekit2} from '../internal';\nconst {RNIapIos} = NativeModules;\nimport type {\n  ProductIOS,\n  ProductPurchase,\n  Purchase,\n  Sku,\n  SubscriptionIOS,\n} from '../types';\nimport type {PaymentDiscount} from '../types/apple';\n\nimport type {NativeModuleProps} from './common';\n\ntype getItems = (skus: Sku[]) => Promise<ProductIOS[] | SubscriptionIOS[]>;\n\ntype getAvailableItems = (\n  automaticallyFinishRestoredTransactions: boolean,\n) => Promise<Purchase[]>;\n\nexport type BuyProduct = (\n  sku: Sku,\n  andDangerouslyFinishTransactionAutomaticallyIOS: boolean,\n  applicationUsername: string | undefined,\n  quantity: number,\n  withOffer: Record<keyof PaymentDiscount, string> | undefined,\n) => Promise<Purchase>;\n\ntype clearTransaction = () => Promise<void>;\ntype clearProducts = () => Promise<void>;\ntype promotedProduct = () => Promise<ProductIOS | null>;\ntype buyPromotedProduct = () => Promise<void>;\ntype requestReceipt = (refresh: boolean) => Promise<string>;\n\ntype finishTransaction = (transactionIdentifier: string) => Promise<boolean>;\n\ntype getPendingTransactions = () => Promise<ProductPurchase[]>;\ntype presentCodeRedemptionSheet = () => Promise<null>;\n\nexport interface IosModuleProps extends NativeModuleProps {\n  getItems: getItems;\n  getAvailableItems: getAvailableItems;\n  buyProduct: BuyProduct;\n  clearTransaction: clearTransaction;\n  clearProducts: clearProducts;\n  promotedProduct: promotedProduct;\n  buyPromotedProduct: buyPromotedProduct;\n  requestReceipt: requestReceipt;\n  finishTransaction: finishTransaction;\n  getPendingTransactions: getPendingTransactions;\n  presentCodeRedemptionSheet: presentCodeRedemptionSheet;\n  disable: () => Promise<null>;\n}\n\n/**\n * Get the current receipt base64 encoded in IOS.\n * @param {forceRefresh?:boolean}\n * @returns {Promise<ProductPurchase[]>}\n */\nexport const getPendingPurchasesIOS = async (): Promise<ProductPurchase[]> =>\n  getIosModule().getPendingTransactions();\n\n/**\n * Get the current receipt base64 encoded in IOS.\n * @param {forceRefresh?:boolean}\n * @returns {Promise<string>}\n */\nexport const getReceiptIOS = async ({\n  forceRefresh,\n}: {\n  forceRefresh?: boolean;\n}): Promise<string> => {\n  if (!isIosStorekit2()) {\n    return RNIapIos.requestReceipt(forceRefresh ?? false);\n  } else {\n    return Promise.reject('Only available on Sk1');\n  }\n};\n/**\n * Launches a modal to register the redeem offer code in IOS.\n * @returns {Promise<null>}\n */\nexport const presentCodeRedemptionSheetIOS = async (): Promise<null> =>\n  getIosModule().presentCodeRedemptionSheet();\n\n/**\n * Should Add Store Payment (iOS only)\n *   Indicates the the App Store purchase should continue from the app instead of the App Store.\n * @returns {Promise<Product | null>} promoted product\n */\nexport const getPromotedProductIOS = (): Promise<ProductIOS | null> => {\n  if (!isIosStorekit2()) {\n    return RNIapIos.promotedProduct();\n  } else {\n    return Promise.reject('Only available on Sk1');\n  }\n};\n\n/**\n * Buy the currently selected promoted product (iOS only)\n *   Initiates the payment process for a promoted product. Should only be called in response to the `iap-promoted-product` event.\n * @returns {Promise<void>}\n */\nexport const buyPromotedProductIOS = (): Promise<void> =>\n  getIosModule().buyPromotedProduct();\n\nconst fetchJsonOrThrow = async (\n  url: string,\n  receiptBody: Record<string, unknown>,\n): Promise<ReceiptValidationResponse | false> => {\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(receiptBody),\n  });\n\n  if (!response.ok) {\n    throw Object.assign(new Error(response.statusText), {\n      statusCode: response.status,\n    });\n  }\n\n  return response.json();\n};\n\nconst TEST_RECEIPT = 21007;\nconst requestAgnosticReceiptValidationIos = async (\n  receiptBody: Record<string, unknown>,\n): Promise<ReceiptValidationResponse | false> => {\n  const response = await fetchJsonOrThrow(\n    'https://buy.itunes.apple.com/verifyReceipt',\n    receiptBody,\n  );\n\n  // Best practice is to check for test receipt and check sandbox instead\n  // https://developer.apple.com/documentation/appstorereceipts/verifyreceipt\n  if (response && response.status === TEST_RECEIPT) {\n    const testResponse = await fetchJsonOrThrow(\n      'https://sandbox.itunes.apple.com/verifyReceipt',\n      receiptBody,\n    );\n\n    return testResponse;\n  }\n\n  return response;\n};\n\n/**\n * Validate receipt for iOS.\n * @param {object} receiptBody the receipt body to send to apple server.\n * @param {boolean} isTest whether this is in test environment which is sandbox.\n * @returns {Promise<Apple.ReceiptValidationResponse | false>}\n */\nexport const validateReceiptIos = async ({\n  receiptBody,\n  isTest,\n}: {\n  receiptBody: Record<string, unknown>;\n  isTest?: boolean;\n}): Promise<ReceiptValidationResponse | false> => {\n  if (isTest == null) {\n    return await requestAgnosticReceiptValidationIos(receiptBody);\n  }\n\n  const url = isTest\n    ? 'https://sandbox.itunes.apple.com/verifyReceipt'\n    : 'https://buy.itunes.apple.com/verifyReceipt';\n\n  const response = await fetchJsonOrThrow(url, receiptBody);\n\n  return response;\n};\n\n/**\n * Clear Transaction (iOS only)\n *   Finish remaining transactions. Related to issue #257 and #801\n *     link : https://github.com/dooboolab/react-native-iap/issues/257\n *            https://github.com/dooboolab/react-native-iap/issues/801\n * @returns {Promise<void>}\n */\nexport const clearTransactionIOS = (): Promise<void> =>\n  getIosModule().clearTransaction();\n\n/**\n * Clear valid Products (iOS only)\n *   Remove all products which are validated by Apple server.\n * @returns {void}\n */\nexport const clearProductsIOS = (): Promise<void> =>\n  getIosModule().clearProducts();\n"],"mappings":"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"}