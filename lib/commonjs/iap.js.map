{"version":3,"names":["RNIapIos","RNIapIosSk2","RNIapModule","RNIapAmazonModule","NativeModules","ANDROID_ITEM_TYPE_SUBSCRIPTION","ProductType","subs","ANDROID_ITEM_TYPE_IAP","inapp","setup","storekitMode","storekit1Mode","storekit2Mode","storekitHybridMode","initConnection","getNativeModule","endConnection","flushFailedPurchasesCachedAsPendingAndroid","getAndroidModule","flushFailedPurchasesCachedAsPending","getProducts","skus","Platform","select","ios","items","isIosStorekit2","getItems","map","productSk2Map","filter","item","includes","productId","type","android","products","getItemsByType","fillProductsWithAdditionalData","Promise","reject","Error","getSubscriptions","subscriptionSk2Map","addSubscriptionPlatform","SubscriptionPlatform","androidPlatform","getAndroidModuleType","subscriptions","castSubscriptions","amazon","platform","subscription","getPurchaseHistory","alsoPublishToEventListener","automaticallyFinishRestoredTransactions","resolve","getAvailableItems","transactionSk2Map","getPurchaseHistoryByType","concat","getAvailablePurchases","getAvailableItemsByType","requestPurchase","request","sku","andDangerouslyFinishTransactionAutomaticallyIOS","appAccountToken","quantity","withOffer","console","warn","offer","offerSk2Map","buyProduct","offerToRecord","isAmazon","buyItemByType","length","obfuscatedAccountIdAndroid","obfuscatedProfileIdAndroid","isOfferPersonalized","undefined","requestSubscription","subscriptionOffers","purchaseTokenAndroid","prorationModeAndroid","so","offerToken","finishTransaction","purchase","isConsumable","developerPayloadAndroid","transactionId","getIosModule","purchaseToken","consumeProduct","userIdAmazon","isAcknowledgedAndroid","purchaseStateAndroid","PurchaseStateAndroid","PURCHASED","acknowledgePurchase"],"sources":["iap.ts"],"sourcesContent":["import {NativeModules, Platform} from 'react-native';\n\nimport * as IapAmazon from './modules/amazon';\nimport * as IapAndroid from './modules/android';\nimport * as IapIos from './modules/ios';\nimport * as IapIosSk2 from './modules/iosSk2';\nimport {offerToRecord} from './types/apple';\nimport {\n  offerSk2Map,\n  ProductSk2,\n  productSk2Map,\n  subscriptionSk2Map,\n  transactionSk2Map,\n} from './types/appleSk2';\nimport {\n  fillProductsWithAdditionalData,\n  getAndroidModule,\n  getAndroidModuleType,\n  getIosModule,\n  getNativeModule,\n  isAmazon,\n  isIosStorekit2,\n  storekit1Mode,\n  storekit2Mode,\n  storekitHybridMode,\n} from './internal';\nimport {\n  Product,\n  ProductPurchase,\n  ProductType,\n  PurchaseResult,\n  PurchaseStateAndroid,\n  RequestPurchase,\n  RequestSubscription,\n  Subscription,\n  SubscriptionAmazon,\n  SubscriptionAndroid,\n  SubscriptionIOS,\n  SubscriptionPlatform,\n  SubscriptionPurchase,\n} from './types';\n\nexport {IapAndroid, IapAmazon, IapIos, IapIosSk2, isIosStorekit2};\n\nconst {RNIapIos, RNIapIosSk2, RNIapModule, RNIapAmazonModule} = NativeModules;\nconst ANDROID_ITEM_TYPE_SUBSCRIPTION = ProductType.subs;\nconst ANDROID_ITEM_TYPE_IAP = ProductType.inapp;\n\n/**\n * STOREKIT1_MODE: Will not enable Storekit 2 even if the device supports it. Thigs will work as before,\n * minimum changes required in the migration guide (default)\n * HYBRID_MODE: Will enable Storekit 2 for iOS devices > 15.0 but will fallback to Sk1 on older devices\n * There are some edge cases that you need to handle in this case (described in migration guide). This mode\n * is for developers that are migrating to Storekit 2 but want to keep supporting older versions.\n * STOREKIT2_MODE: Will *only* enable Storekit 2. This disables Storekit 1. This is for apps that\n * have already targeted a min version of 15 for their app.\n */\nexport type STOREKIT_OPTIONS =\n  | 'STOREKIT1_MODE'\n  | 'STOREKIT_HYBRID_MODE'\n  | 'STOREKIT2_MODE';\n\nexport const setup = ({\n  storekitMode = 'STOREKIT1_MODE',\n}: {\n  storekitMode?: STOREKIT_OPTIONS;\n} = {}) => {\n  switch (storekitMode) {\n    case 'STOREKIT1_MODE':\n      storekit1Mode();\n      break;\n    case 'STOREKIT2_MODE':\n      storekit2Mode();\n      break;\n    case 'STOREKIT_HYBRID_MODE':\n      storekitHybridMode();\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * Init module for purchase flow. Required on Android. In ios it will check whether user canMakePayment.\n * ## Usage\n\n```tsx\nimport React, {useEffect} from 'react';\nimport {View} from 'react-native';\nimport {initConnection} from 'react-native-iap';\n\nconst App = () => {\n  useEffect(() => {\n    void initConnection();\n  }, []);\n\n  return <View />;\n};\n```\n */\nexport const initConnection = (): Promise<boolean> =>\n  getNativeModule().initConnection();\n\n/**\n * Disconnects from native SDK\n * Usage\n * ```tsx\nimport React, {useEffect} from 'react';\nimport {View} from 'react-native';\nimport {endConnection} from 'react-native-iap';\n\nconst App = () => {\n  useEffect(() => {\n    return () => {\n      void endConnection();\n    };\n  }, []);\n\n  return <View />;\n};\n```\n * @returns {Promise<void>}\n */\nexport const endConnection = (): Promise<boolean> =>\n  getNativeModule().endConnection();\n\n/**\n * Consume all 'ghost' purchases (that is, pending payment that already failed but is still marked as pending in Play Store cache). Android only.\n * @returns {Promise<boolean>}\n */\nexport const flushFailedPurchasesCachedAsPendingAndroid =\n  (): Promise<boolean> =>\n    getAndroidModule().flushFailedPurchasesCachedAsPending();\n\n/**\n * Get a list of products (consumable and non-consumable items, but not subscriptions)\n ## Usage\n\n```ts\nimport React, {useState} from 'react';\nimport {Platform} from 'react-native';\nimport {getProducts, Product} from 'react-native-iap';\n\nconst skus = Platform.select({\n  ios: ['com.example.consumableIos'],\n  android: ['com.example.consumableAndroid'],\n});\n\nconst App = () => {\n  const [products, setProducts] = useState<Product[]>([]);\n\n  const handleProducts = async () => {\n    const items = await getProducts({skus});\n\n    setProducts(items);\n  };\n\n  useEffect(() => {\n    void handleProducts();\n  }, []);\n\n  return (\n    <>\n      {products.map((product) => (\n        <Text key={product.productId}>{product.productId}</Text>\n      ))}\n    </>\n  );\n};\n```\n\nJust a few things to keep in mind:\n\n- You can get your products in `componentDidMount`, `useEffect` or another appropriate area of your app.\n- Since a user may start your app with a bad or no internet connection, preparing/getting the items more than once may be a good idea.\n- If the user has no IAPs available when the app starts first, you may want to check again when the user enters your IAP store.\n\n */\nexport const getProducts = ({\n  skus,\n}: {\n  skus: string[];\n}): Promise<Array<Product>> =>\n  (\n    Platform.select({\n      ios: async () => {\n        let items: Product[];\n        if (isIosStorekit2()) {\n          items = ((await RNIapIosSk2.getItems(skus)) as ProductSk2[]).map(\n            productSk2Map,\n          );\n        } else {\n          items = (await RNIapIos.getItems(skus)) as Product[];\n        }\n        return items.filter(\n          (item: Product) =>\n            skus.includes(item.productId) && item.type === 'iap',\n        );\n      },\n      android: async () => {\n        const products = await getAndroidModule().getItemsByType(\n          ANDROID_ITEM_TYPE_IAP,\n          skus,\n        );\n\n        return fillProductsWithAdditionalData(products);\n      },\n    }) || (() => Promise.reject(new Error('Unsupported Platform')))\n  )();\n\n/**\n * Get a list of subscriptions\n * ## Usage\n\n```tsx\nimport React, {useCallback} from 'react';\nimport {View} from 'react-native';\nimport {getSubscriptions} from 'react-native-iap';\n\nconst App = () => {\n  const subscriptions = useCallback(\n    async () =>\n      await getSubscriptions(['com.example.product1', 'com.example.product2']),\n    [],\n  );\n\n  return <View />;\n};\n```\n\n */\nexport const getSubscriptions = ({\n  skus,\n}: {\n  skus: string[];\n}): Promise<Subscription[]> =>\n  (\n    Platform.select({\n      ios: async (): Promise<SubscriptionIOS[]> => {\n        let items: SubscriptionIOS[];\n        if (isIosStorekit2()) {\n          items = ((await RNIapIosSk2.getItems(skus)) as ProductSk2[]).map(\n            subscriptionSk2Map,\n          );\n        } else {\n          items = (await RNIapIos.getItems(skus)) as SubscriptionIOS[];\n        }\n\n        items = items.filter(\n          (item: SubscriptionIOS) =>\n            skus.includes(item.productId) && item.type === 'subs',\n        );\n\n        return addSubscriptionPlatform(items, SubscriptionPlatform.ios);\n      },\n      android: async (): Promise<Subscription[]> => {\n        const androidPlatform = getAndroidModuleType();\n\n        let subscriptions = (await getAndroidModule().getItemsByType(\n          ANDROID_ITEM_TYPE_SUBSCRIPTION,\n          skus,\n        )) as SubscriptionAndroid[] | SubscriptionAmazon[];\n\n        switch (androidPlatform) {\n          case 'android': {\n            const castSubscriptions = subscriptions as SubscriptionAndroid[];\n            return addSubscriptionPlatform(\n              castSubscriptions,\n              SubscriptionPlatform.android,\n            );\n          }\n          case 'amazon':\n            let castSubscriptions = subscriptions as SubscriptionAmazon[];\n            castSubscriptions = await fillProductsWithAdditionalData(\n              castSubscriptions,\n            );\n            return addSubscriptionPlatform(\n              castSubscriptions,\n              SubscriptionPlatform.amazon,\n            );\n          case null:\n          default:\n            throw new Error(\n              `getSubscriptions received unknown platform ${androidPlatform}. Verify the logic in getAndroidModuleType`,\n            );\n        }\n      },\n    }) || (() => Promise.reject(new Error('Unsupported Platform')))\n  )();\n\n/**\n * Adds an extra property to subscriptions so we can distinguish the platform\n * we retrieved them on.\n */\nconst addSubscriptionPlatform = <T>(\n  subscriptions: T[],\n  platform: SubscriptionPlatform,\n): T[] => {\n  return subscriptions.map((subscription) => ({...subscription, platform}));\n};\n\n/**\n * Gets an inventory of purchases made by the user regardless of consumption status\n * ## Usage\n\n```tsx\nimport React, {useCallback} from 'react';\nimport {View} from 'react-native';\nimport {getPurchaseHistory} from 'react-native-iap';\n\nconst App = () => {\n  const history = useCallback(\n    async () =>\n      await getPurchaseHistory([\n        'com.example.product1',\n        'com.example.product2',\n      ]),\n    [],\n  );\n\n  return <View />;\n};\n```\n@param {alsoPublishToEventListener}:boolean. (IOS Sk2 only) When `true`, every element will also be pushed to the purchaseUpdated listener.\nNote that this is only for backaward compatiblity. It won't publish to transactionUpdated (Storekit2) Defaults to `false`\n@param {automaticallyFinishRestoredTransactions}:boolean. (IOS Sk1 only) When `true`, all the transactions that are returned are automatically\nfinished. This means that if you call this method again you won't get the same result on the same device. On the other hand, if `false` you'd\nhave to manually finish the returned transaction once you have delivered the content to your user.\n */\nexport const getPurchaseHistory = ({\n  alsoPublishToEventListener = false,\n  automaticallyFinishRestoredTransactions = true,\n}: {\n  alsoPublishToEventListener?: boolean;\n  automaticallyFinishRestoredTransactions?: boolean;\n} = {}): Promise<(ProductPurchase | SubscriptionPurchase)[]> =>\n  (\n    Platform.select({\n      ios: async () => {\n        if (isIosStorekit2()) {\n          return Promise.resolve(\n            (\n              await RNIapIosSk2.getAvailableItems(alsoPublishToEventListener)\n            ).map(transactionSk2Map),\n          );\n        } else {\n          return RNIapIos.getAvailableItems(\n            automaticallyFinishRestoredTransactions,\n          );\n        }\n      },\n      android: async () => {\n        if (RNIapAmazonModule) {\n          return await RNIapAmazonModule.getAvailableItems();\n        }\n\n        const products = await RNIapModule.getPurchaseHistoryByType(\n          ANDROID_ITEM_TYPE_IAP,\n        );\n\n        const subscriptions = await RNIapModule.getPurchaseHistoryByType(\n          ANDROID_ITEM_TYPE_SUBSCRIPTION,\n        );\n\n        return products.concat(subscriptions);\n      },\n    }) || (() => Promise.resolve([]))\n  )();\n\n/**\n * Get all purchases made by the user (either non-consumable, or haven't been consumed yet)\n * ## Usage\n\n```tsx\nimport React, {useCallback} from 'react';\nimport {View} from 'react-native';\nimport {getAvailablePurchases} from 'react-native-iap';\n\nconst App = () => {\n  const availablePurchases = useCallback(\n    async () => await getAvailablePurchases(),\n    [],\n  );\n\n  return <View />;\n};\n```\n\n## Restoring purchases\n\nYou can use `getAvailablePurchases()` to do what's commonly understood as \"restoring\" purchases.\n\n:::note\nFor debugging you may want to consume all items, you have then to iterate over the purchases returned by `getAvailablePurchases()`.\n:::\n\n:::warning\nBeware that if you consume an item without having recorded the purchase in your database the user may have paid for something without getting it delivered and you will have no way to recover the receipt to validate and restore their purchase.\n:::\n\n```tsx\nimport React from 'react';\nimport {Button} from 'react-native';\nimport {getAvailablePurchases,finishTransaction} from 'react-native-iap';\n\nconst App = () => {\n  handleRestore = async () => {\n    try {\n      const purchases = await getAvailablePurchases();\n      const newState = {premium: false, ads: true};\n      let titles = [];\n\n      await Promise.all(purchases.map(async purchase => {\n        switch (purchase.productId) {\n          case 'com.example.premium':\n            newState.premium = true;\n            titles.push('Premium Version');\n            break;\n\n          case 'com.example.no_ads':\n            newState.ads = false;\n            titles.push('No Ads');\n            break;\n\n          case 'com.example.coins100':\n            await finishTransaction(purchase.purchaseToken);\n            CoinStore.addCoins(100);\n        }\n      })\n\n      Alert.alert(\n        'Restore Successful',\n        `You successfully restored the following purchases: ${titles.join(', ')}`,\n      );\n    } catch (error) {\n      console.warn(error);\n      Alert.alert(error.message);\n    }\n  };\n\n  return (\n    <Button title=\"Restore purchases\" onPress={handleRestore} />\n  )\n};\n```\n@param {alsoPublishToEventListener}:boolean When `true`, every element will also be pushed to the purchaseUpdated listener.\nNote that this is only for backaward compatiblity. It won't publish to transactionUpdated (Storekit2) Defaults to `false`\n *\n */\nexport const getAvailablePurchases = ({\n  alsoPublishToEventListener = false,\n  automaticallyFinishRestoredTransactions = false,\n}: {\n  alsoPublishToEventListener?: boolean;\n  automaticallyFinishRestoredTransactions?: boolean;\n} = {}): Promise<(ProductPurchase | SubscriptionPurchase)[]> =>\n  (\n    Platform.select({\n      ios: async () => {\n        if (isIosStorekit2()) {\n          return Promise.resolve(\n            (\n              await RNIapIosSk2.getAvailableItems(alsoPublishToEventListener)\n            ).map(transactionSk2Map),\n          );\n        } else {\n          return RNIapIos.getAvailableItems(\n            automaticallyFinishRestoredTransactions,\n          );\n        }\n      },\n      android: async () => {\n        if (RNIapAmazonModule) {\n          return await RNIapAmazonModule.getAvailableItems();\n        }\n\n        const products = await RNIapModule.getAvailableItemsByType(\n          ANDROID_ITEM_TYPE_IAP,\n        );\n\n        const subscriptions = await RNIapModule.getAvailableItemsByType(\n          ANDROID_ITEM_TYPE_SUBSCRIPTION,\n        );\n\n        return products.concat(subscriptions);\n      },\n    }) || (() => Promise.resolve([]))\n  )();\n\n/**\n * Request a purchase for product. This will be received in `PurchaseUpdatedListener`.\n * Request a purchase for a product (consumables or non-consumables).\n\nThe response will be received through the `PurchaseUpdatedListener`.\n\n:::note\n`andDangerouslyFinishTransactionAutomatically` defaults to false. We recommend\nalways keeping at false, and verifying the transaction receipts on the server-side.\n:::\n\n## Signature\n\n```ts\nrequestPurchase(\n The product's sku/ID\n  sku,\n\n\n   * You should set this to false and call finishTransaction manually when you have delivered the purchased goods to the user.\n   * @default false\n\n  andDangerouslyFinishTransactionAutomaticallyIOS = false,\n\n  /** Specifies an optional obfuscated string that is uniquely associated with the user's account in your app.\n  obfuscatedAccountIdAndroid,\n\n  Specifies an optional obfuscated string that is uniquely associated with the user's profile in your app.\n  obfuscatedProfileIdAndroid,\n\n   The purchaser's user ID\n  applicationUsername,\n): Promise<ProductPurchase>;\n```\n\n## Usage\n\n```tsx\nimport React, {useCallback} from 'react';\nimport {Button} from 'react-native';\nimport {requestPurchase, Product, Sku, getProducts} from 'react-native-iap';\n\nconst App = () => {\n  const products = useCallback(\n    async () => getProducts(['com.example.product']),\n    [],\n  );\n\n  const handlePurchase = async (sku: Sku) => {\n    await requestPurchase({sku});\n  };\n\n  return (\n    <>\n      {products.map((product) => (\n        <Button\n          key={product.productId}\n          title=\"Buy product\"\n          onPress={() => handlePurchase(product.productId)}\n        />\n      ))}\n    </>\n  );\n};\n```\n\n */\n\nexport const requestPurchase = (\n  request: RequestPurchase,\n): Promise<ProductPurchase | void> =>\n  (\n    Platform.select({\n      ios: async () => {\n        if (!('sku' in request)) {\n          throw new Error('sku is required for iOS purchase');\n        }\n\n        const {\n          sku,\n          andDangerouslyFinishTransactionAutomaticallyIOS = false,\n          appAccountToken,\n          quantity,\n          withOffer,\n        } = request;\n\n        if (andDangerouslyFinishTransactionAutomaticallyIOS) {\n          console.warn(\n            'You are dangerously allowing react-native-iap to finish your transaction automatically. You should set andDangerouslyFinishTransactionAutomatically to false when calling requestPurchase and call finishTransaction manually when you have delivered the purchased goods to the user. It defaults to true to provide backwards compatibility. Will default to false in version 4.0.0.',\n          );\n        }\n        if (isIosStorekit2()) {\n          const offer = offerSk2Map(withOffer);\n\n          return RNIapIosSk2.buyProduct(\n            sku,\n            andDangerouslyFinishTransactionAutomaticallyIOS,\n            appAccountToken,\n            quantity ?? -1,\n            offer,\n          );\n        } else {\n          return RNIapIos.buyProduct(\n            sku,\n            andDangerouslyFinishTransactionAutomaticallyIOS,\n            appAccountToken,\n            quantity ?? -1,\n            offerToRecord(withOffer),\n          );\n        }\n      },\n      android: async () => {\n        if (isAmazon) {\n          if (!('sku' in request)) {\n            throw new Error('sku is required for Amazon purchase');\n          }\n          const {sku} = request;\n          return RNIapAmazonModule.buyItemByType(sku);\n        } else {\n          if (!('skus' in request) || !request.skus.length) {\n            throw new Error('skus is required for Android purchase');\n          }\n\n          const {\n            skus,\n            obfuscatedAccountIdAndroid,\n            obfuscatedProfileIdAndroid,\n            isOfferPersonalized,\n          } = request;\n          return getAndroidModule().buyItemByType(\n            ANDROID_ITEM_TYPE_IAP,\n            skus,\n            undefined,\n            -1,\n            obfuscatedAccountIdAndroid,\n            obfuscatedProfileIdAndroid,\n            [],\n            isOfferPersonalized ?? false,\n          );\n        }\n      },\n    }) || Promise.resolve\n  )();\n\n/**\n * Request a purchase for product. This will be received in `PurchaseUpdatedListener`.\n * Request a purchase for a subscription.\n\nThe response will be received through the `PurchaseUpdatedListener`.\n\n:::note\n`andDangerouslyFinishTransactionAutomatically` defaults to false. We recommend\nalways keeping at false, and verifying the transaction receipts on the server-side.\n:::\n\n## Signature\n\n```ts\nrequestSubscription(\n  The product's sku/ID\n  sku,\n\n\n   * You should set this to false and call finishTransaction manually when you have delivered the purchased goods to the user.\n   * @default false\n\n  andDangerouslyFinishTransactionAutomaticallyIOS = false,\n\n   purchaseToken that the user is upgrading or downgrading from (Android).\n  purchaseTokenAndroid,\n\n  UNKNOWN_SUBSCRIPTION_UPGRADE_DOWNGRADE_POLICY, IMMEDIATE_WITH_TIME_PRORATION, IMMEDIATE_AND_CHARGE_PRORATED_PRICE, IMMEDIATE_WITHOUT_PRORATION, DEFERRED\n  prorationModeAndroid = -1,\n\n  /** Specifies an optional obfuscated string that is uniquely associated with the user's account in your app.\n  obfuscatedAccountIdAndroid,\n\n  Specifies an optional obfuscated string that is uniquely associated with the user's profile in your app.\n  obfuscatedProfileIdAndroid,\n\n  The purchaser's user ID\n  applicationUsername,\n): Promise<SubscriptionPurchase>\n```\n\n## Usage\n\n```tsx\nimport React, {useCallback} from 'react';\nimport {Button} from 'react-native';\nimport {\n  requestSubscription,\n  Product,\n  Sku,\n  getSubscriptions,\n} from 'react-native-iap';\n\nconst App = () => {\n  const subscriptions = useCallback(\n    async () => getSubscriptions(['com.example.subscription']),\n    [],\n  );\n\n  const handlePurchase = async (sku: Sku) => {\n    await requestSubscription({sku});\n  };\n\n  return (\n    <>\n      {subscriptions.map((subscription) => (\n        <Button\n          key={subscription.productId}\n          title=\"Buy subscription\"\n          onPress={() => handlePurchase(subscription.productId)}\n        />\n      ))}\n    </>\n  );\n};\n```\n */\nexport const requestSubscription = (\n  request: RequestSubscription,\n): Promise<SubscriptionPurchase | null | void> =>\n  (\n    Platform.select({\n      ios: async () => {\n        if (!('sku' in request)) {\n          throw new Error('sku is required for iOS subscriptions');\n        }\n\n        const {\n          sku,\n          andDangerouslyFinishTransactionAutomaticallyIOS = false,\n          appAccountToken,\n          quantity,\n          withOffer,\n        } = request;\n\n        if (andDangerouslyFinishTransactionAutomaticallyIOS) {\n          console.warn(\n            'You are dangerously allowing react-native-iap to finish your transaction automatically. You should set andDangerouslyFinishTransactionAutomatically to false when calling requestPurchase and call finishTransaction manually when you have delivered the purchased goods to the user. It defaults to true to provide backwards compatibility. Will default to false in version 4.0.0.',\n          );\n        }\n\n        if (isIosStorekit2()) {\n          const offer = offerSk2Map(withOffer);\n\n          return RNIapIosSk2.buyProduct(\n            sku,\n            andDangerouslyFinishTransactionAutomaticallyIOS,\n            appAccountToken,\n            quantity ?? -1,\n            offer,\n          );\n        } else {\n          return RNIapIos.buyProduct(\n            sku,\n            andDangerouslyFinishTransactionAutomaticallyIOS,\n            appAccountToken,\n            quantity ?? -1,\n            offerToRecord(withOffer),\n          );\n        }\n      },\n      android: async () => {\n        if (isAmazon) {\n          if (!('sku' in request)) {\n            throw new Error('sku is required for Amazon subscriptions');\n          }\n          return RNIapAmazonModule.buyItemByType(request.sku);\n        } else {\n          if (\n            !('subscriptionOffers' in request) ||\n            request.subscriptionOffers.length === 0\n          ) {\n            throw new Error(\n              'subscriptionOffers are required for Google Play subscriptions',\n            );\n          }\n\n          const {\n            subscriptionOffers,\n            purchaseTokenAndroid,\n            prorationModeAndroid,\n            obfuscatedAccountIdAndroid,\n            obfuscatedProfileIdAndroid,\n            isOfferPersonalized,\n          } = request;\n\n          return RNIapModule.buyItemByType(\n            ANDROID_ITEM_TYPE_SUBSCRIPTION,\n            subscriptionOffers?.map((so) => so.sku),\n            purchaseTokenAndroid,\n            prorationModeAndroid,\n            obfuscatedAccountIdAndroid,\n            obfuscatedProfileIdAndroid,\n            subscriptionOffers?.map((so) => so.offerToken),\n            isOfferPersonalized ?? false,\n          );\n        }\n      },\n    }) || (() => Promise.resolve(null))\n  )();\n\n/**\n * Finish Transaction (both platforms)\n *   Abstracts  Finish Transaction\n *   iOS: Tells StoreKit that you have delivered the purchase to the user and StoreKit can now let go of the transaction.\n *   Call this after you have persisted the purchased state to your server or local data in your app.\n *   `react-native-iap` will continue to deliver the purchase updated events with the successful purchase until you finish the transaction. **Even after the app has relaunched.**\n *   Android: it will consume purchase for consumables and acknowledge purchase for non-consumables.\n *\n```tsx\nimport React from 'react';\nimport {Button} from 'react-native';\nimport {finishTransaction} from 'react-native-iap';\n\nconst App = () => {\n  const handlePurchase = async () => {\n    // ... handle the purchase request\n\n    const result = finishTransaction(purchase);\n  };\n\n  return <Button title=\"Buy product\" onPress={handlePurchase} />;\n};\n```\n */\nexport const finishTransaction = ({\n  purchase,\n  isConsumable,\n  developerPayloadAndroid,\n}: {\n  purchase: ProductPurchase | SubscriptionPurchase;\n  isConsumable?: boolean;\n  developerPayloadAndroid?: string;\n}): Promise<PurchaseResult | boolean> => {\n  return (\n    Platform.select({\n      ios: async () => {\n        const transactionId = purchase.transactionId;\n\n        if (!transactionId) {\n          return Promise.reject(\n            new Error('transactionId required to finish iOS transaction'),\n          );\n        }\n        return getIosModule().finishTransaction(transactionId);\n      },\n      android: async () => {\n        if (purchase?.purchaseToken) {\n          if (isConsumable) {\n            return getAndroidModule().consumeProduct(\n              purchase.purchaseToken,\n              developerPayloadAndroid,\n            );\n          } else if (\n            purchase.userIdAmazon ||\n            (!purchase.isAcknowledgedAndroid &&\n              purchase.purchaseStateAndroid === PurchaseStateAndroid.PURCHASED)\n          ) {\n            return getAndroidModule().acknowledgePurchase(\n              purchase.purchaseToken,\n              developerPayloadAndroid,\n            );\n          } else {\n            return Promise.reject(\n              new Error('purchase is not suitable to be purchased'),\n            );\n          }\n        }\n        return Promise.reject(\n          new Error('purchase is not suitable to be purchased'),\n        );\n      },\n    }) || (() => Promise.reject(new Error('Unsupported Platform')))\n  )();\n};\n"],"mappings":";;;;;;;;;;;;;;AAAA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AAOA;;AAYA;;;;;;AAkBA,MAAM;EAACA,QAAD;EAAWC,WAAX;EAAwBC,WAAxB;EAAqCC;AAArC,IAA0DC,0BAAhE;AACA,MAAMC,8BAA8B,GAAGC,kBAAA,CAAYC,IAAnD;AACA,MAAMC,qBAAqB,GAAGF,kBAAA,CAAYG,KAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMO,MAAMC,KAAK,GAAG,YAIV;EAAA,IAJW;IACpBC,YAAY,GAAG;EADK,CAIX,uEAAP,EAAO;;EACT,QAAQA,YAAR;IACE,KAAK,gBAAL;MACE,IAAAC,uBAAA;MACA;;IACF,KAAK,gBAAL;MACE,IAAAC,uBAAA;MACA;;IACF,KAAK,sBAAL;MACE,IAAAC,4BAAA;MACA;;IACF;MACE;EAXJ;AAaD,CAlBM;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMC,cAAc,GAAG,MAC5B,IAAAC,yBAAA,IAAkBD,cAAlB,EADK;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAME,aAAa,GAAG,MAC3B,IAAAD,yBAAA,IAAkBC,aAAlB,EADK;AAGP;AACA;AACA;AACA;;;;;AACO,MAAMC,0CAA0C,GACrD,MACE,IAAAC,0BAAA,IAAmBC,mCAAnB,EAFG;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMC,WAAW,GAAG;EAAA,IAAC;IAC1BC;EAD0B,CAAD;EAAA,OAKzB,CA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"}